                        第I部分 必备知识

一、错误处理
Visual Studio：调试观察窗口：$err,hr   GetLastError
GetLastError SetLastError
FormatMessage
Edit_LimitText(hwndCtl, cchMax)
#define Edit_GetText(hwndCtl, lpch, cchMax) GetWindowText((hwndCtl), (lpch), (cchMax))
GetDlgItem(hwnd, IDC_ERRORCODE)
SetDlgItemText
GetDlgItemInt SetDlgItemInt
LoadLibraryEx
DialogBoxParam


二、字符和字符串处理
使用unicode处理字符串, UNICODE _UNICODE 宏同时指定 前者windows用的，后者C运行库用
_countof(szBuffer)
MultiByteToWideChar(CP_ACP, 0, szCmdLine, Size, pPos, wcslen(pPos));
WideCharToMultiByte
C语言提供的转换函数为 mbstowcs()/wcstombs()
strcmp strcpy  _s函数
wcscmp wcscpy  _s函数
CompareStringOrdinal 最后一个参数ignoreCase，返回CSTR_EQUAL表示相同
IsTextUnicode


三、内核对象

                        第II部分 工作机理

四、进程
GetVersionEx VerifyVersionInfo
GetCommandLine CommandLineToArgv
GetEnvironmentStrings GetEnvironmentVariable ExpandEnvironmentStringsW SetEnvironmentVariable
CreateProcess main返回  ExitProcess  TerminateProcess
GetExitCodeProcess  CloseHandle WaitForSingleObject
ShellExecuteEx
LoadIcon
GetModuleFileName  GetModuleHandle GetModuleHandleEx
GetCurrentDirectory  SetCurrentDirectory   _wchdir _wgetcwd (推荐)
GetFullPathName
tlhelp32.h 枚举进程, 此.h里系列方法，如 CreateToolhelp32Snapshot


五、作业

QueryFullProcessImageName


六、线程基础
DWORD WINAPI ThreadFunc(PVOID pvParam) {
    return 0;
}

CreateThread
线程执行完了自行return  ExitThread   TerminateThread WaitForSingleObject WaitForMultipleObjects  微秒 INFINITE
_beginthreadex    _endthreadex
GetExitCodeThread
GetCurrentProcessId   GetCurrentThreadId

GetCurrentProcess  GetCurrentThread 伪句柄 pseudohandle
GetProcessTimes  GetThreadTimes
伪句柄转成真正句柄 DuplicateHandle 用完后需CloseHandle


七、线程调度、优先级和关联性
GetSystemTimeAdjustment
SuspendThread  ResumeThread
Sleep(ms)  SwitchToThread

GetTickCount64() 包含线程被别人抢占的时间
GetThreadTimes  不含被中断时间（精度100ns）
QueryThreadCycleTime 不含被中断时间, 但与cpu频率相关，且频率通常会变化
QueryPerformanceFrequency QueryPerformanceCounter 高精度，假设线程不会被抢占，为简化使用可创建自定义类 CStopwatch
https://github.com/qianhk/Windows-via-Cpp/blob/main/08-UserSyncCompare/UserSyncCompare.cpp


GetThreadContext 各个寄存器的值
RAX EAX AX AL
RCX 在循环和串操作中充当计数器，指令执行后CX内容自动修改，因此称为计数寄存器
RBP 基址指针寄存器 当前函数的栈空间基地址
RSP 堆栈指针寄存器 当前函数为被调用函数准备的栈空间的基地址
RSI( Source Index register) 源变址寄存器
RDI( Destination Index Register) 目的变址寄存器
RIP 指令指针寄存器
FR 标志寄存器

C:\> START /LOW calc.exe 我试了没用
SetThreadPriority  GetThreadPriority
SetProcessPriorityBoost SetThreadPriorityBoost 是否禁止系统自动提升线程优先级
SetFileInformationByHandle


八、用户模式下的线程同步
InterlockedExchangeAdd
InterlockedExchangeAdd64
InterlockedIncrement InterlockedDecrement 原子加减1
InterlockedExchange 64 Pointer
InterlockedPushEntrySList FlushSList 等InterlockedXxx函数

关键段 critical section
CRITICAL_SECTION g_cs;
InitializeCriticalSection(&g_cs);  InitializeCriticalSectionAndSpinCount
EnterCriticalSection(&g_cs);     TryEnterCriticalSection
LeaveCriticalSection(&g_cs);
DeleteCriticalSection(&g_cs);

Slim读/写锁
InitializeSRWLock
AcquireSRWLockExclusive   AcquireSRWLockShared
ReleaseSRWLockExclusive   ReleaseSRWLockShared
ReleaseSRWLock

条件变量
SleepConditionVariableCS  SleepConditionVariableSRW
WakeConditionVariable   WakeAllConditionVariable

同时访问多个锁的几个线程需用相同的顺序取得锁，不然可能死锁，比如锁1锁2，线程1先获得锁1再尝试锁2，线程2先获得锁2再尝试锁1。


九、用内核对象进行线程同步
WaitForSingleObject 返回  WAIT_OBJECT_0  WAIT_TIMEOUT  WAIT_FAILED
WaitForMultipleObjects  微秒 INFINITE
WaitForXXX等待成功时会导致自动重置事件内核对象重置为未触发
WaitForXXX是以原子方式工作的
CreateEvent CreateEventEx OpenEvent SetEvent ResetEvent PulseEvent
CreateWaitableTimer OpenWaitableTimer SetWaitableTimer CancelWaitableTimer
CreateSemaphore CreateSemaphoreEx OpenSemaphore ReleaseSemaphore
CreateMutex CreateMutexEx OpenMutex ReleaseMutex 遗弃问题WAIT_ABANDONED
其它线程同步函数：WaitForInputIdle MsgWaitForMultipleObjects(Ex) WaitForDebugEvent SignalObjectAndWait
等待链遍历API检测死锁：RegisterWaitChainCOMCallback OpenThreadWaitChainSession CloseThreadWaitChainSession GetThreadWaitChain

十、同步设备I/O与异步设备I/O
CreateFile 7个参数 失败返回INVALID_HANDLE_VALUE 而不是NULL
CreateMailslot CreateNamedPipe CreatePipe Socket accept(Ex) CreateConsoleScreenBuffer GetStdHandle
串口波特率 SetCommConfig
超时值:SetMailslotInfo
CloseHandle  closesocket
GetFileType

文件：
GetFileSizeEx 逻辑大小
GetCompressedFileSize 磁盘实际占用大小
ReadFile WriteFile
SetFilePointerEx
SetEndOfFile
FlushFileBuffers
CancelSynchronousIo取消同步I/O，是否能真正取消取决于驱动程序

异步设备I/O:
OVERLAPPED
HasOverlappedIoCompleted
CancelIo CancelIoEx
GetOverlappedResult
可提醒I/O
I/O完成端口


十一、Windows线程池
异步方式调用函数：
TrySubmitThreadpoolCallback
CreateThreadpoolWork  SubmitThreadpoolWork WaitForThreadpoolWorkCallbacks CloseThreadpoolWork

每隔一段时间调用一个函数：
CreateThreadpoolTimer
SetThreadpoolTimer
IsThreadpoolTimerSet
WaitForThreadpoolTimerCallbacks
CloseThreadpoolTimer

在内核对象触发时调用一个函数：
CreateThreadpoolWait
SetThreadpoolWait
WaitForThreadpoolWaitCallbacks
CloseThreadpoolWait

异步I/O请求完成时调用一个函数：
CreateThreadpollIo
StartThreadpoolIo
CancelThreadpoolIo
WaitForThreadpoolIoCallbacks
CloseThreadpoolIo

回调函数的终止：
LeaveCriticalSectionWhenCallbackReturns
ReleaseMutexWhenCallbackReturns
ReleaseSemaphoreWhenCallbackReturns
SetEventWhenCallbackReturns
FreeLibraryWhenCallbackReturns
CallbackMayRunLong
DisassociateCurrentThreadFromCallback

对线程池进行定制：
CreateThreadpool
SetThreadpoolThreadMinimum SetThreadpoolThreadMaxium
CloseThreadpool
InitializeThreadpoolEnvironment
DestroyThreadpoolEnvironment
SetThreadpoolCallbackPool
SetThreadpoolCallbackRunsLong
SetThreadpoolCallbackLibrary

清理组:
CreateThreadpoolCleanupGroup
SetThreadpoolCallbackCleanupGroup
CloseThreadpoolCleanupGroupMembers
CloseThreadpoolCleanupGroup


十二、纤程
ConvertThreadToFiber(Ex)
CreateFiber(Ex)
SwitchToFiber
DeleteFiber
GetCurrentFiber
GetFiberData
IsThreadAFiber


                        第III部分 内存管理

十三、Windows内存体系结构
__unaligned  UNALIGNED  UNALIGNED64
VirtualAlloc 预订(resering)        VirtualFree
分配粒度  64KB  起始地址
大小 x86 x64 4KB  IA-64 8KB
PEB (process environment block)   TEB (thread environment block)


十四、探索虚拟内存
GetSystemInfo  GetNativeSystemInfo
GetLogicalProcessorInformation
IsWow64Process
GlobalMemoryStatus(Ex)
GetProcessMemoryInfo
VirtualQuery(Ex)


十五、在应用程序中使用虚拟内存
VirtualAlloc  VirtualFree
VirtualProtect
AllocateUserPhysicalPages


十六、线程栈
EXCEPTION_STACK_OVERFLOW
SetThreadStackGuarante
_resetstkoflw


十七、内存映射文件
共享段:
#pragma data_seg("Shared")
volatile LONG g_lApplicationInstances = 0;
#pragma data_seg()
#pragma comment(linker, "/Section:Shared,RWS")

g_uMsgAppInstCountUpdate = RegisterWindowMessage(TEXT("MsgAppInstCountUpdate"));
PostMessage(HWND_BROADCAST, g_uMsgAppInstCountUpdate, 0, 0);

CreateFile CreateFileMapping MapViewOfFile UnmapViewOfFile FlushViewOfFile closeHandle closeHandle


十八、堆
HeapCreate HeapAlloc HeapReAlloc
HeapSize
HeapFree
HeapDestroy
Heap32First Heap32Next Heap32ListFirst Heap32ListNext
GetProcessHeaps
HeapValidate HeapCompact HeapLock HeapUnlock HeapWalk


                        第IV部分 动态链接库

十九、DLL基础





二十、DLL高级技术





二十一、线程局部存储区





二十二、DLL注入和API拦截





                        第V部分 结构化异常处理

二十三、中止处理程序





二十四、异常处理程序与软件异常





二十五、未处理异常、向量化异常处理与C++异常





二十六、错误报告与应用程序恢复





                        第VI部分

附录A 构建环境
附录B 消息处理宏、子控件宏和API宏
