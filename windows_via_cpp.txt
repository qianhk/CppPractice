                        第I部分 必备知识

一、错误处理
Visual Studio：调试观察窗口：$err,hr   GetLastError
GetLastError SetLastError
FormatMessage
Edit_LimitText(hwndCtl, cchMax)
#define Edit_GetText(hwndCtl, lpch, cchMax) GetWindowText((hwndCtl), (lpch), (cchMax))
GetDlgItem(hwnd, IDC_ERRORCODE)
SetDlgItemText
GetDlgItemInt SetDlgItemInt
LoadLibraryEx
DialogBoxParam


二、字符和字符串处理
使用unicode处理字符串, UNICODE _UNICODE 宏同时指定 前者windows用的，后者C运行库用
_countof(szBuffer)
MultiByteToWideChar(CP_ACP, 0, szCmdLine, Size, pPos, wcslen(pPos));
WideCharToMultiByte
C语言提供的转换函数为 mbstowcs()/wcstombs()
strcmp strcpy  _s函数
wcscmp wcscpy  _s函数
CompareStringOrdinal 最后一个参数ignoreCase，返回CSTR_EQUAL表示相同
IsTextUnicode


三、内核对象

                        第II部分 工作机理

四、进程
GetVersionEx VerifyVersionInfo
GetCommandLine CommandLineToArgv
GetEnvironmentStrings GetEnvironmentVariable ExpandEnvironmentStringsW SetEnvironmentVariable
CreateProcess main返回  ExitProcess  TerminateProcess
GetExitCodeProcess  CloseHandle WaitForSingleObject
ShellExecuteEx
LoadIcon
GetModuleFileName  GetModuleHandle GetModuleHandleEx
GetCurrentDirectory  SetCurrentDirectory   _wchdir _wgetcwd (推荐)
GetFullPathName
tlhelp32.h 枚举进程, 此.h里系列方法，如 CreateToolhelp32Snapshot


五、作业

QueryFullProcessImageName


六、线程基础
DWORD WINAPI ThreadFunc(PVOID pvParam) {
    return 0;
}

CreateThread
线程执行完了自行return  ExitThread   TerminateThread WaitForSingleObject WaitForMultipleObjects  微秒 INFINITE
_beginthreadex    _endthreadex
GetExitCodeThread
GetCurrentProcessId   GetCurrentThreadId

GetCurrentProcess  GetCurrentThread 伪句柄 pseudohandle
GetProcessTimes  GetThreadTimes
伪句柄转成真正句柄 DuplicateHandle 用完后需CloseHandle


七、线程调度、优先级和关联性
GetSystemTimeAdjustment
SuspendThread  ResumeThread
Sleep(ms)  SwitchToThread

GetTickCount64() 包含线程被别人抢占的时间
GetThreadTimes  不含被中断时间（精度100ns）
QueryThreadCycleTime 不含被中断时间, 但与cpu频率相关，且频率通常会变化
QueryPerformanceFrequency QueryPerformanceCounter 高精度，假设线程不会被抢占，为简化使用可创建自定义类 CStopwatch
https://github.com/qianhk/Windows-via-Cpp/blob/main/08-UserSyncCompare/UserSyncCompare.cpp


GetThreadContext 各个寄存器的值
RAX EAX AX AL
RCX 在循环和串操作中充当计数器，指令执行后CX内容自动修改，因此称为计数寄存器
RBP 基址指针寄存器 当前函数的栈空间基地址
RSP 堆栈指针寄存器 当前函数为被调用函数准备的栈空间的基地址
RSI( Source Index register) 源变址寄存器
RDI( Destination Index Register) 目的变址寄存器
RIP 指令指针寄存器
FR 标志寄存器

C:\> START /LOW calc.exe 我试了没用
SetThreadPriority  GetThreadPriority
SetProcessPriorityBoost SetThreadPriorityBoost 是否禁止系统自动提升线程优先级
SetFileInformationByHandle


八、用户模式下的线程同步
InterlockedExchangeAdd
InterlockedExchangeAdd64
InterlockedIncrement InterlockedDecrement 原子加减1
InterlockedExchange 64 Pointer
InterlockedPushEntrySList FlushSList 等InterlockedXxx函数

关键段 critical section
CRITICAL_SECTION g_cs;
InitializeCriticalSection(&g_cs);  InitializeCriticalSectionAndSpinCount
EnterCriticalSection(&g_cs);     TryEnterCriticalSection
LeaveCriticalSection(&g_cs);
DeleteCriticalSection(&g_cs);

Slim读/写锁
InitializeSRWLock
AcquireSRWLockExclusive   AcquireSRWLockShared
ReleaseSRWLockExclusive   ReleaseSRWLockShared
ReleaseSRWLock

条件变量
SleepConditionVariableCS  SleepConditionVariableSRW
WakeConditionVariable   WakeAllConditionVariable

同时访问多个锁的几个线程需用相同的顺序取得锁，不然可能死锁，比如锁1锁2，线程1先获得锁1再尝试锁2，线程2先获得锁2再尝试锁1。


九、用内核对象进行线程同步
WaitForSingleObject 返回  WAIT_OBJECT_0  WAIT_TIMEOUT  WAIT_FAILED
WaitForMultipleObjects  微秒 INFINITE
WaitForXXX等待成功时会导致自动重置事件内核对象重置为未触发
WaitForXXX是以原子方式工作的


十、同步设备I/O与异步设备I/O





十一、Windows线程池





十二、纤程





                        第III部分 内存管理

十三、Windows内存体系结构





十四、探索虚拟内存





十五、在应用程序中使用虚拟内存





十六、线程栈





十七、内存映射文件





十八、堆





                        第IV部分 动态链接库

十九、DLL基础





二十、DLL高级技术





二十一、线程局部存储区





二十二、DLL注入和API拦截





                        第V部分 结构化异常处理

二十三、中止处理程序





二十四、异常处理程序与软件异常





二十五、未处理异常、向量化异常处理与C++异常





二十六、错误报告与应用程序恢复





                        第VI部分

附录A 构建环境
附录B 消息处理宏、子控件宏和API宏
